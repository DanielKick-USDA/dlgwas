# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_zma_kegg_download.ipynb.

# %% auto 0
__all__ = ['ensure_dir_path_exists', 'get_kegg_species_list', 'mkdf_kegg_species_list', 'download_kegg_gene', 'read_kegg_gene']

# %% ../nbs/01_zma_kegg_download.ipynb 5
"Iteratively check for and create directories to store output. Ideally this would just be os.mkdirs() but that function is not available in this version of python"
def ensure_dir_path_exists(dir_path = '../ext_data'):
    import os
    
    for i in range(2, len(dir_path.split('/'))+1):
        path_part = '/'.join(dir_path.split('/')[0:i])
        if not os.path.exists(path_part):
            os.mkdir(path_part)
        

# %% ../nbs/01_zma_kegg_download.ipynb 6
# Get all the genes for zea mays
# Some gene entries that don't start begin with a chromosome number. These included plastid (Pltd) and mitochondria (MT) genes.

def get_kegg_species_list(species = 'zma'):
    import os
    # make sure the directory exists to hold these data
    ensure_dir_path_exists(dir_path = '../ext_data/'+species+'/kegg')

    file_path = '../ext_data/'+species+'/kegg'+'/'+species+'_list.txt'
    # only retrieve if there isn't a local copy
    if file_path.split('/')[-1] in os.listdir('/'.join(file_path.split('/')[:-1])):
        with open(file_path, 'r') as f:
            r_text = f.read()
    else:
        r = requests.get('https://rest.kegg.jp/list/'+species)
        r_text = r.text
        with open(file_path, 'a') as f:
            f.write(r_text)
    return(r_text)

# %% ../nbs/01_zma_kegg_download.ipynb 7
def mkdf_kegg_species_list(kegg_species_list = get_kegg_species_list(species = 'zma')):
    import pandas as pd
    kegg_list_zma = pd.DataFrame([e.split('\t') for e in kegg_species_list.split('\n') ])
    # clean up names
    kegg_list_zma = kegg_list_zma.rename(columns = dict(zip(
        [i for i in range(4)],
        ['gene', 'seq_type', 'chromosome_positon', 'gene_type']
    )))

    kegg_list_zma = kegg_list_zma.loc[kegg_list_zma.chromosome_positon.notna(), ]
    return(kegg_list_zma)

# %% ../nbs/01_zma_kegg_download.ipynb 12
def download_kegg_gene(kegg_gene = 'zma:103644366', **kwargs):    
    """
    Downloads kegg gene entry if it does not exist locally. 
    Can optionally take a numeric value as `sleep_for` to sleep after downloading a file. 
    Useful for controlling the rate requests being sent to the API.
    """
    species = kegg_gene.split(':')[0]
    dir_path = '../ext_data/'+species+'/kegg/gene_entries/'
    ensure_dir_path_exists(dir_path = dir_path)
    
    kegg_gene_safename = kegg_gene.replace(':', '_') # name that's safe for file names
    file_path = dir_path+kegg_gene_safename+'.txt'
    
    # only download if the file doesn't already exist
    if os.path.exists(file_path):
        pass
    else:
        # option to sleep for a given amount of time so tha tthe api isn't accessed to much
        # sleeping here means that we only sleep if there will be a request to download
        if 'sleep_for' in kwargs.keys():
            time.sleep(kwargs['sleep_for'])
        
        r = requests.get('https://rest.kegg.jp/get/'+kegg_gene)
        with open(file_path, 'a') as f:
            f.write(r.text)

# %% ../nbs/01_zma_kegg_download.ipynb 13
def read_kegg_gene(kegg_gene = 'zma:103644366'):  
    "Reads in locally cached KEGG gene entries. Will download the requested entry if it doesn't exist locally."
    import os
    species = kegg_gene.split(':')[0]
    dir_path = '../ext_data/'+species+'/kegg/gene_entries/'
    ensure_dir_path_exists(dir_path = dir_path)
    
    kegg_gene_safename = kegg_gene.replace(':', '_') # name that's safe for file names
    file_path = dir_path+kegg_gene_safename+'.txt'

    if not os.path.exists(file_path):
        download_kegg_gene(kegg_gene)
    
    with open(file_path, 'r') as f:
        r_text = f.read()
    return(r_text)
